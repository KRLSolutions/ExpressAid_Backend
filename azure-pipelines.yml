trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Configuration
  resourceGroupName: 'expressaid-backend-rg'
  appServicePlanName: 'expressaid-backend-plan'
  webAppName: 'expressaid-backend'
  location: 'East US'
  
  # Application Configuration
  nodeVersion: '18.x'
  
  # Environment Variables (these will be set in Azure App Service)
  NODE_ENV: 'production'
  PORT: '8080'
  AWS_ACCESS_KEY_ID: 'AKIAX2GA5I6XGINGEPWR'
  AWS_SECRET_ACCESS_KEY: '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'
  AWS_REGION: 'us-east-1'
  MONGODB_URI: 'mongodb+srv://admin:LHONNmuaD6FzhAGO@cluster0.hibzkks.mongodb.net/expressaid?retryWrites=true&w=majority'
  JWT_SECRET: '057bed89eb41d8de095d6419121b9edc5685025a154893bb26c2dc41b65e67c7254cbe8202c4654deef8514fc158404ef6952736b54953ce0b4b2f484267853f'
  CASHFREE_APP_ID: 'TEST10393719a08909e07f6157a7221e91739301'
  CASHFREE_SECRET_KEY: 'cfsk_ma_test_d81a3c09420dcde848287e6b7aacfca5_3f2bf834'
  CASHFREE_ENV: 'TEST'
  SMS_SERVICE: 'aws-sns'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: Build
    displayName: 'Build and Test'
    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodeVersion)
    
    - script: |
        echo "Installing dependencies..."
        cd backend
        npm ci
      displayName: 'Install Dependencies'
    
    - script: |
        echo "Running tests..."
        cd backend
        npm test || echo "No tests found, continuing..."
      displayName: 'Run Tests'
    
    - script: |
        echo "Testing AWS SNS configuration..."
        cd backend
        node fix-aws-sns.js
      displayName: 'Test AWS SNS Configuration'
    
    - task: ArchiveFiles@2
      displayName: 'Archive Backend'
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Backend Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'backend'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAzure
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceManagerTemplateDeployment@3
            displayName: 'Create/Update Resource Group'
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: 'Pipeline-service-connection'
              subscriptionId: '$(AZURE_SUBSCRIPTION_ID)'
              action: 'Create Or Update Resource Group'
              resourceGroupName: $(resourceGroupName)
              location: $(location)
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/backend/azure-resources.json'
              csmParametersFile: '$(Pipeline.Workspace)/backend/azure-resources.parameters.json'
              deploymentMode: 'Incremental'
              deploymentName: 'ExpressAid-Infrastructure-$(Build.BuildId)'
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: 'Pipeline-service-connection'
              appName: $(webAppName)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend/backend.zip'
              appType: 'webApp'
              deploymentMethod: 'auto'
          
          - task: AzureCLI@2
            displayName: 'Configure App Settings'
            inputs:
              azureSubscription: 'Pipeline-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Configuring environment variables..."
                az webapp config appsettings set \
                  --name $(webAppName) \
                  --resource-group $(resourceGroupName) \
                  --settings \
                    NODE_ENV=$(NODE_ENV) \
                    PORT=$(PORT) \
                    AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID) \
                    AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESS_KEY) \
                    AWS_REGION=$(AWS_REGION) \
                    MONGODB_URI="$(MONGODB_URI)" \
                    JWT_SECRET=$(JWT_SECRET) \
                    CASHFREE_APP_ID=$(CASHFREE_APP_ID) \
                    CASHFREE_SECRET_KEY=$(CASHFREE_SECRET_KEY) \
                    CASHFREE_ENV=$(CASHFREE_ENV) \
                    SMS_SERVICE=$(SMS_SERVICE)
                
                echo "Enabling HTTPS..."
                az webapp update \
                  --name $(webAppName) \
                  --resource-group $(resourceGroupName) \
                  --https-only true
          
          - task: AzureCLI@2
            displayName: 'Test Deployment'
            inputs:
              azureSubscription: 'Pipeline-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Waiting for deployment to complete..."
                sleep 60
                
                echo "Testing health endpoint..."
                HEALTH_CHECK=$(curl -s https://$(webAppName).azurewebsites.net/api/health)
                if [ $? -eq 0 ]; then
                  echo "‚úÖ Health check passed"
                  echo "Response: $HEALTH_CHECK"
                else
                  echo "‚ùå Health check failed"
                  exit 1
                fi
                
                echo "Testing AWS SNS configuration..."
                curl -X POST https://$(webAppName).azurewebsites.net/api/auth/send-otp \
                  -H "Content-Type: application/json" \
                  -d '{"phoneNumber":"+919346048610"}' || echo "SMS test completed"
          
          - task: PowerShell@2
            displayName: 'Send Deployment Notification'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "üéâ Deployment completed successfully!"
                Write-Host "üåê Backend URL: https://$(webAppName).azurewebsites.net"
                Write-Host "üìä Health Check: https://$(webAppName).azurewebsites.net/api/health"
                Write-Host "üìã Status: https://$(webAppName).azurewebsites.net/api/status" 